name: Continuous Integration

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

  push:
    branches: ["main", "dev"]

  # Allow manual workflow runs
  workflow_dispatch:

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Detect changes to optimize what needs to run
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      deps: ${{ steps.changes.outputs.deps }}
      workflows: ${{ steps.changes.outputs.workflows }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - '*.ts'
              - '*.tsx'
              - '*.js'
              - '*.jsx'
              - 'tsconfig.json'
            deps:
              - 'package.json'
              - 'package-lock.json'
            workflows:
              - '.github/workflows/**'

  # Install and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.src == 'true' || needs.detect-changes.outputs.deps == 'true' || needs.detect-changes.outputs.workflows == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm ci

  # Type checking
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run TypeScript compiler
        run: npx tsc --noEmit

  # Linting
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

  # Build check
  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Build Next.js project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: build-output
          path: |
            .next
            out
          retention-days: 1

  # Test suite (ready for when you add tests)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true  # Don't fail CI if no tests exist yet

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Check if test script exists
        id: check-test
        run: |
          if npm run | grep -q "test"; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No test script found. Skipping tests."
          fi

      - name: Run tests
        if: steps.check-test.outputs.has_tests == 'true'
        run: npm test

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true  # Security issues shouldn't block PR, but should be visible

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [typecheck, lint, build, test, security]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          echo "## CI Summary"
          echo ""

          # Check each job result
          if [[ "${{ needs.typecheck.result }}" == "success" ]]; then
            echo "✅ TypeScript: Passed"
          else
            echo "❌ TypeScript: Failed"
          fi

          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ ESLint: Passed"
          else
            echo "❌ ESLint: Failed"
          fi

          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build: Passed"
          else
            echo "❌ Build: Failed"
          fi

          if [[ "${{ needs.test.result }}" == "success" || "${{ needs.test.result }}" == "skipped" ]]; then
            echo "✅ Tests: Passed/Skipped"
          else
            echo "⚠️  Tests: Failed (non-blocking)"
          fi

          if [[ "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ Security: No issues"
          else
            echo "⚠️  Security: Check warnings (non-blocking)"
          fi

          # Determine overall status
          if [[ "${{ needs.typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo ""
            echo "❌ CI Failed - Please fix the errors above"
            exit 1
          else
            echo ""
            echo "✅ All required checks passed!"
          fi